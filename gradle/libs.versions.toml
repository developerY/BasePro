[versions]
agp = "8.9.0-alpha05"          # Android Gradle Plugin, used to build Android apps
kotlin = "2.0.20"               # Kotlin programming language version
coreKtx = "1.13.1"             # Core KTX, Kotlin extensions for Android core libraries
junit = "4.13.2"               # JUnit, a framework for writing and running tests in Java
junitVersion = "1.2.1"         # AndroidX JUnit extension, provides compatibility with JUnit
espressoCore = "3.6.1"         # Espresso, a library for Android UI testing
lifecycleRuntimeKtx = "2.8.4"  # AndroidX Lifecycle runtime KTX, provides Kotlin extensions for lifecycle management
activityCompose = "1.9.1"      # Activity Compose, allows using Jetpack Compose in Activities
composeBom = "2024.08.00"      # Compose BOM (Bill of Materials), ensures consistent Compose library versions

# Additional Libraries
hilt = "2.49"                  # Hilt, a dependency injection library for Android
androidxCoreKtx = "1.12.0"     # AndroidX Core KTX, Kotlin extensions for Android core libraries
appCompat = "1.7.0"            # AppCompat, backward-compatible versions of Android components
material = "1.12.0"            # Material Components for Android, implements Material Design
constraintLayout = "2.2.0"     # ConstraintLayout, a layout manager for complex layouts
room = "2.6.1"                 # Room, an abstraction layer over SQLite to allow fluent database access
work = "2.9.1"                 # WorkManager, manages background work with guaranteed execution
lifecycle = "2.8.4"            # AndroidX Lifecycle components, manages UI-related data in a lifecycle-conscious way
hiltLifecycleViewModel = "1.0.0-alpha03"  # Hilt ViewModel injection
hiltNavigation = "1.0.0"       # Hilt support for Navigation component
hiltNavigationCompose = "1.2.0" # Hilt support for Jetpack Compose Navigation
hiltWork = "1.2.0"             # Hilt support for WorkManager
androidxNavigation = "2.8.2"
ksp = "2.0.20-1.0.24"
uiToolingPreviewAndroid = "1.7.0"
serialization = "1.6.3"
cameraX = "1.3.4"
accompanistPermissions = "0.36.0"
mapsCompose = "4.4.1"
mapsplatformSecretsPlugin = "2.0.1" # mapsplatform-secrets
okhttp = "5.0.0-alpha.11" # OkHttp
healthConnect = "1.1.0-alpha10" # Health Connect"

# plugins
# Apollo GraphQL
apollo = "3.8.5" # apollo-graphql

[libraries]
androidx-core-ktx = { module = "androidx.core:core-ktx", version.ref = "coreKtx" }  # Core KTX library
junit = { module = "junit:junit", version.ref = "junit" }  # JUnit testing library
androidx-junit = { module = "androidx.test.ext:junit", version.ref = "junitVersion" }  # AndroidX JUnit extension
androidx-espresso-core = { module = "androidx.test.espresso:espresso-core", version.ref = "espressoCore" }  # Espresso UI testing
androidx-lifecycle-runtime-ktx = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }  # Lifecycle runtime KTX
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "activityCompose" }  # Activity support for Compose
androidx-compose-bom = { module = "androidx.compose:compose-bom", version.ref = "composeBom" }  # Compose BOM for consistent versions
androidx-ui = { module = "androidx.compose.ui:ui" }  # Compose UI library
androidx-ui-graphics = { module = "androidx.compose.ui:ui-graphics" }  # Compose UI graphics library
androidx-ui-tooling = { module = "androidx.compose.ui:ui-tooling" }  # Compose UI tooling library
androidx-ui-tooling-preview = { module = "androidx.compose.ui:ui-tooling-preview" }  # Compose UI tooling preview
androidx-ui-test-manifest = { module = "androidx.compose.ui:ui-test-manifest" }  # Compose UI test manifest
androidx-ui-test-junit4 = { module = "androidx.compose.ui:ui-test-junit4" }  # Compose UI test library for JUnit4
androidx-material3 = { module = "androidx.compose.material3:material3" }  # Material Design 3 components for Compose
androidx-navigation-compose = { module = "androidx.navigation:navigation-compose", version.ref = "androidxNavigation" }

kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serialization"}


# Hilt Librariesandroidx.navigation:navigation-compose
hilt-android = { module = "com.google.dagger:hilt-android", version.ref = "hilt" }  # Hilt core library for dependency injection
hilt-android-compiler = { module = "com.google.dagger:hilt-android-compiler", version.ref = "hilt" }  # Hilt annotation processor
# hilt-compiler = { module = "com.google.dagger:hilt-compiler", version.ref = "hilt" } # Not used in Android
hilt-lifecycle-viewmodel = { module = "androidx.hilt:hilt-lifecycle-viewmodel", version.ref = "hiltLifecycleViewModel" }  # Hilt integration for ViewModel
hilt-navigation-compose = { module = "androidx.hilt:hilt-navigation-compose", version.ref = "hiltNavigationCompose" }  # Hilt integration for Compose Navigation
hilt-work = { module = "androidx.hilt:hilt-work", version.ref = "hiltWork" }  # Hilt integration for WorkManager

# AppCompat and Material Libraries
androidx-appcompat = { module = "androidx.appcompat:appcompat", version.ref = "appCompat" }  # Backward-compatible versions of Android components
material = { module = "com.google.android.material:material", version.ref = "material" }  # Material Design components for Android
constraintlayout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "constraintLayout" }  # ConstraintLayout manager for complex layouts

# Room Libraries
room-runtime = { module = "androidx.room:room-runtime", version.ref = "room" }  # Room runtime library for database access
room-ktx = { module = "androidx.room:room-ktx", version.ref = "room" }  # Kotlin extensions for Room
room-compiler = { module = "androidx.room:room-compiler", version.ref = "room"}  # Room annotation processor

# WorkManager Library
work-runtime-ktx = { module = "androidx.work:work-runtime-ktx", version.ref = "work" }  # WorkManager runtime with Kotlin extensions

# Lifecycle Libraries
lifecycle-viewmodel-ktx = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycle" }  # ViewModel support with Kotlin extensions
lifecycle-livedata-ktx = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "lifecycle" }
lifecycle-viewmodel-android = { module = "androidx.lifecycle:lifecycle-viewmodel-android", version.ref = "lifecycle" }  # LiveData support with Kotlin extensions
# lifecycle-runtime-ktx = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycle" }  # Lifecycle runtime with Kotlin extensions
lifecycle-viewmodel-compose = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycle" }
androidx-ui-tooling-preview-android = { group = "androidx.compose.ui", name = "ui-tooling-preview-android", version.ref = "uiToolingPreviewAndroid" }

# Permissions
google-accompanist-permissions = { module = "com.google.accompanist:accompanist-permissions", version.ref = "accompanistPermissions" }

# CameraX core library
androidx-camera-core = { module = "androidx.camera:camera-core", version.ref = "cameraX" }
# CameraX Camera2 implementation
androidx-camera-camera2 = { module = "androidx.camera:camera-camera2", version.ref = "cameraX" }
# CameraX lifecycle support
androidx-camera-lifecycle = { module = "androidx.camera:camera-lifecycle", version.ref = "cameraX" }
# CameraX View (needed for CameraX in Compose)
androidx-camera-view = { module = "androidx.camera:camera-view", version.ref = "cameraX" }

# GraphQL
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
apollo-graphql = { module = "com.apollographql.apollo3:apollo-runtime", version.ref = "apollo" }
apollo-graphql-cache = { module = "com.apollographql.apollo3:apollo-normalized-cache", version.ref = "apollo" }

# Map
google-maps-compose = { module = 'com.google.maps.android:maps-compose', version.ref = 'mapsCompose' }

# Health
healthConnect = { module = 'androidx.health.connect:connect-client', version.ref = "healthConnect" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }  # Android application plugin
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }  # Kotlin Android plugin
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }  # Kotlin Compose plugin
# kotlin-kapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin" } # Kotlin annotation processing
hilt-gradle = { id = "com.google.dagger.hilt.android", version.ref = "hilt" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
android-library = { id = "com.android.library", version.ref = "agp" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
mapsplatform-secrets = { id = "com.google.android.libraries.mapsplatform.secrets-gradle-plugin", version.ref = "mapsplatformSecretsPlugin" }

apollo-graphql = { id = "com.apollographql.apollo3", version.ref = "apollo" }